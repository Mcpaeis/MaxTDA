legend.title=element_blank(), axis.title.y = element_text(angle = 0, vjust=0.5),
legend.position = c(0.74, 0.05), legend.margin = margin(0, 0, 0, 0),
legend.text = element_text(size = 7), legend.spacing.x = unit(0, "mm"),
legend.spacing.y = unit(0, "mm"))
# (4) Plot the smoothed surface of the noisy manifold
ggplot(data=kde_samples_thresh,  aes(x=X0, y=X1)) + xlab('x') + ylab('y') +
xlim(c(-1, 1)) + ylim(c(-1, 1)) +
stat_density2d(geom="tile", aes(fill=..density..^0.25), contour=FALSE) +
scale_fill_gradientn(colours = colorRampPalette(c("white", blues9))(256),
guide = guide_colorbar(title = 'Density',
barheight = unit(3, "mm"),
barwidth = unit(30, "mm"),
direction = "horizontal",
title.position = "top")) +
theme(text = element_text(size=14), legend.box.background = element_rect(color = "black"),
legend.title=element_blank(), axis.title.y = element_text(angle = 0, vjust=0.5),
legend.position = c(0.74, 0.05), legend.margin = margin(0, 0, 0, 0),
legend.text = element_text(size = 7), legend.spacing.x = unit(0, "mm"),
legend.spacing.y = unit(0, "mm"))
ggsave(paste(img.dir, 'overlap_annulus_sample_space.pdf', sep=''), dpi=300, height = 3, width = 3)
# (5) Plot the diagrams of the smoothed samples
vr_diagram_smooth = vietoris_rips(kde_samples_thresh, dim=1) # VR diagram
dtm_ = gridDiag(X = as.matrix(kde_samples_thresh), FUN = dtm, m0=0.9, lim=cbind(
c(min(kde_samples_thresh$X0), max(kde_samples_thresh$X0)),
c(min(kde_samples_thresh$X1), max(kde_samples_thresh$X1))),
by = 0.05, sublevel = F, location = TRUE, library = 'Dionysus'
)[['diagram']]
dtm_diagram_smooth = data.frame(dimension=dtm_[, 1], birth=dtm_[, 3], death=dtm_[, 2]) # DTM diagram
kde_ = gridDiag(X = as.matrix(kde_samples_thresh), FUN = kde, h=0.1, lim=cbind(
c(min(kde_samples_thresh$X0), max(kde_samples_thresh$X0)),
c(min(kde_samples_thresh$X1), max(kde_samples_thresh$X1))),
by = 0.05, sublevel = F, location = TRUE, library = 'Dionysus'
)[['diagram']]
kde_diagram_smooth = data.frame(dimension=kde_[, 1], birth=kde_[, 3], death=kde_[, 2]) # KDE diagram
plot_diagram(vr_diagram_smooth)
plot_diagram(vr_diagram_smooth, x_lim=c(0, .6), y_lim=c(0, .6))
ggsave(paste(img.dir, 'vr_pd_overlap_annulus_smoothed.pdf', sep=''), dpi=300, height = 3, width = 3)
rm(list = ls())
library(TDA)
library(dplyr)
library(ripserr)
library(ggplot2)
source('utils.R')
library(tidyverse)
theme_set(theme_bw())
img.dir = '../images/'
# (1) Load the data
true_manifold = read.csv('../data/tprecovery/annulus_tm.csv') %>% select(X0, X1)
noisy_manifold = read.csv('../data/tprecovery/annulus_nm.csv') %>% select(X0, X1)
kde_samples_thresh = read.csv('../data/tprecovery/annulus_kde_th.csv') %>% select(X0, X1)
kde_samples_nothresh = read.csv('../data/tprecovery/annulus_kde_nt.csv') %>% select(X0, X1)
# (2) Add the circular geometry for plotting
circle_unif <- function(n, r=1){
theta <- runif(n, 0, 2*pi); x <- cos(theta)*r; y <- sin(theta)*r
circle_data <- data.frame(x1=x, x2=y) %>% arrange(atan2(x2, x1))
return(circle_data)
}
sparse_geometry = circle_unif(1000) %>% rename(sparse_x0=x1, sparse_x1=x2)
dense_geometry = circle_unif(1000, 0.5) %>% rename(dense_x0=x1, dense_x1=x2)
cbind(noisy_manifold, sparse_geometry, dense_geometry) %>%
ggplot(aes(x = X0, y=X1)) +
geom_point(alpha=0.75, size=0.5) + xlab('x') + ylab('y') +
geom_path(aes(x=sparse_x0, y=sparse_x1), color='pink') +
geom_path(aes(x=dense_x0, y=dense_x1), color='red', alpha=0.5) +
theme(axis.title.y = element_text(angle = 0, vjust=0.5))
sparse_geometry = circle_unif(1000) %>% rename(sparse_x0=x1, sparse_x1=x2)
dense_geometry = circle_unif(1000, 0.5) %>% rename(dense_x0=x1, dense_x1=x2)
cbind(noisy_manifold, sparse_geometry, dense_geometry) %>%
ggplot(aes(x = X0, y=X1)) +
geom_point(data = noisy_manifold, aes(x=X0, y=X1), color="violet") +
geom_point(alpha=0.75, size=0.5) + xlab('x') + ylab('y') +
geom_path(aes(x=sparse_x0, y=sparse_x1), color='pink') +
geom_path(aes(x=dense_x0, y=dense_x1), color='red', alpha=0.5) +
theme(axis.title.y = element_text(angle = 0, vjust=0.5))
cbind(noisy_manifold, sparse_geometry, dense_geometry) %>%
ggplot(aes(x = X0, y=X1)) +
geom_point(data = true_manifold, aes(x=X0, y=X1), color="violet") +
geom_point(alpha=0.75, size=0.5) + xlab('x') + ylab('y') +
geom_path(aes(x=sparse_x0, y=sparse_x1), color='pink') +
geom_path(aes(x=dense_x0, y=dense_x1), color='red', alpha=0.5) +
theme(axis.title.y = element_text(angle = 0, vjust=0.5))
cbind(noisy_manifold, sparse_geometry, dense_geometry) %>%
ggplot(aes(x = X0, y=X1)) +
geom_point(data = true_manifold, aes(x=X0, y=X1), color="black") +
geom_point(alpha=0.75, size=0.5, color="violet") + xlab('x') + ylab('y') +
geom_path(aes(x=sparse_x0, y=sparse_x1), color='pink') +
geom_path(aes(x=dense_x0, y=dense_x1), color='red', alpha=0.5) +
theme(axis.title.y = element_text(angle = 0, vjust=0.5))
cbind(noisy_manifold, sparse_geometry, dense_geometry) %>%
ggplot(aes(x = X0, y=X1)) +
geom_point(data = true_manifold, aes(x=X0, y=X1), color="black") +
#geom_point(alpha=0.75, size=0.5, color="violet") + xlab('x') + ylab('y') +
geom_path(aes(x=sparse_x0, y=sparse_x1), color='pink') +
geom_path(aes(x=dense_x0, y=dense_x1), color='red', alpha=0.5) +
theme(axis.title.y = element_text(angle = 0, vjust=0.5))
cbind(noisy_manifold, sparse_geometry, dense_geometry) %>%
ggplot(aes(x = X0, y=X1)) +
geom_point(alpha=0.75, size=0.5) + xlab('x') + ylab('y') +
geom_point(data = true_manifold, aes(x=X0, y=X1), color="violet") +
geom_path(aes(x=sparse_x0, y=sparse_x1), color='pink') +
geom_path(aes(x=dense_x0, y=dense_x1), color='red', alpha=0.5) +
theme(axis.title.y = element_text(angle = 0, vjust=0.5))
cbind(noisy_manifold, sparse_geometry, dense_geometry) %>%
ggplot(aes(x = X0, y=X1)) +
geom_point(alpha=0.75, size=0.5) + xlab('x') + ylab('y') +
geom_point(data = true_manifold, aes(x=X0, y=X1), color="violet", alpha=0.75, size=0.5) +
geom_path(aes(x=sparse_x0, y=sparse_x1), color='pink') +
geom_path(aes(x=dense_x0, y=dense_x1), color='red', alpha=0.5) +
theme(axis.title.y = element_text(angle = 0, vjust=0.5))
cbind(noisy_manifold, sparse_geometry, dense_geometry) %>%
ggplot(aes(x = X0, y=X1)) +
geom_point(alpha=0.75, size=0.5) + xlab('x') + ylab('y') +
geom_point(data = true_manifold, aes(x=X0, y=X1), color="violet", alpha=0.75, size=0.75) +
geom_path(aes(x=sparse_x0, y=sparse_x1), color='pink') +
geom_path(aes(x=dense_x0, y=dense_x1), color='red', alpha=0.5) +
theme(axis.title.y = element_text(angle = 0, vjust=0.5))
cbind(noisy_manifold, sparse_geometry, dense_geometry) %>%
ggplot(aes(x = X0, y=X1)) +
geom_point(alpha=0.75, size=0.5) + xlab('x') + ylab('y') +
geom_point(data = true_manifold, aes(x=X0, y=X1), color="violet", alpha=0.75, size=1.75) +
geom_path(aes(x=sparse_x0, y=sparse_x1), color='pink') +
geom_path(aes(x=dense_x0, y=dense_x1), color='red', alpha=0.5) +
theme(axis.title.y = element_text(angle = 0, vjust=0.5))
cbind(noisy_manifold, sparse_geometry, dense_geometry) %>%
ggplot(aes(x = X0, y=X1)) +
geom_point(alpha=0.75, size=0.5) + xlab('x') + ylab('y') +
geom_point(data = true_manifold, aes(x=X0, y=X1), color="violet", alpha=0.75, size=0.5) +
geom_path(aes(x=sparse_x0, y=sparse_x1), color='pink') +
geom_path(aes(x=dense_x0, y=dense_x1), color='red', alpha=0.5) +
theme(axis.title.y = element_text(angle = 0, vjust=0.5))
sparse_geometry = circle_unif(1000) %>% rename(sparse_x0=x1, sparse_x1=x2)
dense_geometry = circle_unif(1000, 0.5) %>% rename(dense_x0=x1, dense_x1=x2)
cbind(noisy_manifold, sparse_geometry, dense_geometry) %>%
ggplot(aes(x = X0, y=X1)) +
geom_point(alpha=0.75, size=0.5) + xlab('x') + ylab('y') +
geom_point(data = true_manifold, aes(x=X0, y=X1), color="blue", alpha=0.75, size=0.5) +
geom_path(aes(x=sparse_x0, y=sparse_x1), color='pink') +
geom_path(aes(x=dense_x0, y=dense_x1), color='red', alpha=0.5) +
theme(axis.title.y = element_text(angle = 0, vjust=0.5))
rm(list = ls())
library(TDA)
library(dplyr)
library(ripserr)
library(ggplot2)
source('utils.R')
library(tidyverse)
theme_set(theme_bw())
img.dir = '../images/'
# (1) Load the data
true_manifold = read.csv('../data/tprecovery/annulus_tm.csv') %>% select(X0, X1)
noisy_manifold = read.csv('../data/tprecovery/annulus_nm.csv') %>% select(X0, X1)
kde_samples_thresh = read.csv('../data/tprecovery/annulus_kde_th.csv') %>% select(X0, X1)
kde_samples_nothresh = read.csv('../data/tprecovery/annulus_kde_nt.csv') %>% select(X0, X1)
# (2) Add the circular geometry for plotting
circle_unif <- function(n, r=1){
theta <- runif(n, 0, 2*pi); x <- cos(theta)*r; y <- sin(theta)*r
circle_data <- data.frame(x1=x, x2=y) %>% arrange(atan2(x2, x1))
return(circle_data)
}
sparse_geometry = circle_unif(1000) %>% rename(sparse_x0=x1, sparse_x1=x2)
dense_geometry = circle_unif(1000, 0.5) %>% rename(dense_x0=x1, dense_x1=x2)
cbind(noisy_manifold, sparse_geometry, dense_geometry) %>%
ggplot(aes(x = X0, y=X1)) +
geom_point(alpha=0.75, size=0.5) + xlab('x') + ylab('y') +
geom_point(data = true_manifold, aes(x=X0, y=X1), color="#619CFF", alpha=0.75, size=0.5) +
geom_path(aes(x=sparse_x0, y=sparse_x1), color='pink') +
geom_path(aes(x=dense_x0, y=dense_x1), color='red', alpha=0.5) +
theme(axis.title.y = element_text(angle = 0, vjust=0.5))
ggsave(paste(img.dir, 'overlap_annulus_noisy.pdf', sep=''), dpi=300, height = 3, width = 3)
rm(list = ls())
library(TDA)
library(dplyr)
library(ripserr)
library(ggplot2)
source('utils.R')
library(tidyverse)
theme_set(theme_bw())
img.dir = '../images/'
# (1) Load the data
true_manifold = read.csv('../data/tprecovery/annulus_tm.csv') %>% select(X0, X1)
noisy_manifold = read.csv('../data/tprecovery/annulus_nm.csv') %>% select(X0, X1)
kde_samples_thresh = read.csv('../data/tprecovery/annulus_kde_th.csv') %>% select(X0, X1)
kde_samples_nothresh = read.csv('../data/tprecovery/annulus_kde_nt.csv') %>% select(X0, X1)
# (2) Add the circular geometry for plotting
circle_unif <- function(n, r=1){
theta <- runif(n, 0, 2*pi); x <- cos(theta)*r; y <- sin(theta)*r
circle_data <- data.frame(x1=x, x2=y) %>% arrange(atan2(x2, x1))
return(circle_data)
}
sparse_geometry = circle_unif(1000) %>% rename(sparse_x0=x1, sparse_x1=x2)
dense_geometry = circle_unif(1000, 0.5) %>% rename(dense_x0=x1, dense_x1=x2)
cbind(noisy_manifold, sparse_geometry, dense_geometry) %>%
ggplot(aes(x = X0, y=X1)) +
geom_point(alpha=0.75, size=0.5) + xlab('x') + ylab('y') +
geom_point(data = true_manifold, aes(x=X0, y=X1), color="#619CFF", alpha=0.75, size=0.5) +
geom_path(aes(x=sparse_x0, y=sparse_x1), color='pink') +
geom_path(aes(x=dense_x0, y=dense_x1), color='red', alpha=0.5) +
theme(axis.title.y = element_text(angle = 0, vjust=0.5))
# (3) Compute the persistence diagrams on the noisy data using VR, DTM and KDE as benchmark
vr_diagram = vietoris_rips(noisy_manifold, dim=1) # VR diagram
dtm_ = gridDiag(X = as.matrix(noisy_manifold), FUN = dtm, m0=0.9, lim=cbind(
c(min(noisy_manifold$X0), max(noisy_manifold$X0)),
c(min(noisy_manifold$X1), max(noisy_manifold$X1))),
by = 0.05, sublevel = F, location = TRUE, library = 'Dionysus'
)[['diagram']]
dtm_diagram = data.frame(dimension=dtm_[, 1], birth=dtm_[, 3], death=dtm_[, 2]) # DTM diagram
kde_ = gridDiag(X = as.matrix(noisy_manifold), FUN = kde, h=0.1, lim=cbind(
c(min(noisy_manifold$X0), max(noisy_manifold$X0)),
c(min(noisy_manifold$X1), max(noisy_manifold$X1))),
by = 0.05, sublevel = F, location = TRUE, library = 'Dionysus'
)[['diagram']]
kde_diagram = data.frame(dimension=kde_[, 1], birth=kde_[, 3], death=kde_[, 2]) # KDE diagram
plot_diagram(vr_diagram, x_lim=c(0, .6), y_lim=c(0, .6))
#ggsave(paste(img.dir, 'vr_pd_overlap_annulus_noisy.pdf', sep=''), dpi=300, height = 3, width = 3)
plot_diagram(dtm_diagram, TRUE, x_lim=c(0, 2), y_lim=c(0, 2))
#ggsave(paste(img.dir, 'dtm_pd_overlap_annulus_noisy.pdf', sep=''), dpi=300, height = 3, width = 3)
plot_diagram(kde_diagram, TRUE)
# (4) Plot the smoothed surface of the noisy manifold
ggplot(data=kde_samples_thresh,  aes(x=X0, y=X1)) + xlab('x') + ylab('y') +
xlim(c(-1, 1)) + ylim(c(-1, 1)) +
stat_density2d(geom="tile", aes(fill=..density..^0.25), contour=FALSE) +
scale_fill_gradientn(colours = colorRampPalette(c("white", blues9))(256),
guide = guide_colorbar(title = 'Density',
barheight = unit(3, "mm"),
barwidth = unit(30, "mm"),
direction = "horizontal",
title.position = "top")) +
theme(text = element_text(size=14), legend.box.background = element_rect(color = "black"),
legend.title=element_blank(), axis.title.y = element_text(angle = 0, vjust=0.5),
legend.position = c(0.74, 0.05), legend.margin = margin(0, 0, 0, 0),
legend.text = element_text(size = 7), legend.spacing.x = unit(0, "mm"),
legend.spacing.y = unit(0, "mm"))
# (5) Plot the diagrams of the smoothed samples
vr_diagram_smooth = vietoris_rips(kde_samples_thresh, dim=1) # VR diagram
dtm_ = gridDiag(X = as.matrix(kde_samples_thresh), FUN = dtm, m0=0.9, lim=cbind(
c(min(kde_samples_thresh$X0), max(kde_samples_thresh$X0)),
c(min(kde_samples_thresh$X1), max(kde_samples_thresh$X1))),
by = 0.05, sublevel = F, location = TRUE, library = 'Dionysus'
)[['diagram']]
dtm_diagram_smooth = data.frame(dimension=dtm_[, 1], birth=dtm_[, 3], death=dtm_[, 2]) # DTM diagram
kde_ = gridDiag(X = as.matrix(kde_samples_thresh), FUN = kde, h=0.1, lim=cbind(
c(min(kde_samples_thresh$X0), max(kde_samples_thresh$X0)),
c(min(kde_samples_thresh$X1), max(kde_samples_thresh$X1))),
by = 0.05, sublevel = F, location = TRUE, library = 'Dionysus'
)[['diagram']]
kde_diagram_smooth = data.frame(dimension=kde_[, 1], birth=kde_[, 3], death=kde_[, 2]) # KDE diagram
plot_diagram(vr_diagram_smooth, x_lim=c(0, .6), y_lim=c(0, .6))
#ggsave(paste(img.dir, 'vr_pd_overlap_annulus_smoothed.pdf', sep=''), dpi=300, height = 3, width = 3)
plot_diagram(dtm_diagram_smooth, TRUE, x_lim=c(0, 2), y_lim=c(0, 2))
#ggsave(paste(img.dir, 'dtm_pd_overlap_annulus_smoothed.pdf', sep=''), dpi=300, height = 3, width = 3)
plot_diagram(kde_diagram_smooth, TRUE, x_lim=c(0, 1.5), y_lim=c(0, 1.5))
# (6) Using only the KDE, we vary the bandwidth
max_pers <- function(grid_diagram){
dgmat = as.matrix(grid_diagram[['diagram']])
dg = data.frame(dimension = dgmat[, 1], birth=dgmat[, 3], death=dgmat[, 2]) %>% filter(dimension==1)
return(round(max(dg$birth - dg$death), 2))
}
# Run for single sample
max_pers_vals = data.frame(BW = numeric(), TM = numeric(), NM = numeric(), NT = numeric(), TH = numeric())
for (h in bdw){
true_grid_diag = gridDiag(X = as.matrix(true_manifold), FUN = kde, h=h,
lim=cbind( c(min(true_manifold$X0), max(true_manifold$X0)),
c(min(true_manifold$X1), max(true_manifold$X1))),
by = 0.05, sublevel = F, location = TRUE, library = 'Dionysus')
noisy_grid_diag = gridDiag(X = as.matrix(noisy_manifold), FUN = kde, h=h,
lim=cbind( c(min(noisy_manifold$X0), max(noisy_manifold$X0)),
c(min(noisy_manifold$X1), max(noisy_manifold$X1))),
by = 0.05, sublevel = F, location = TRUE, library = 'Dionysus')
kde_thresh_grid_diag = gridDiag(X = as.matrix(kde_samples_thresh), FUN = kde, h=h,
lim=cbind( c(min(kde_samples_thresh$X0), max(kde_samples_thresh$X0)),
c(min(kde_samples_thresh$X1), max(kde_samples_thresh$X1))),
by = 0.05, sublevel = F, location = TRUE, library = 'Dionysus')
kde_nothresh_grid_diag = gridDiag(X = as.matrix(kde_samples_nothresh), FUN = kde, h=h,
lim=cbind( c(min(kde_samples_nothresh$X0), max(kde_samples_nothresh$X0)),
c(min(kde_samples_nothresh$X1), max(kde_samples_nothresh$X1))),
by = 0.05, sublevel = F, location = TRUE, library = 'Dionysus')
vec = data.frame(BW=h, TM=max_pers(true_grid_diag), NM=max_pers(noisy_grid_diag), NT=max_pers(kde_nothresh_grid_diag), TH=max_pers(kde_thresh_grid_diag))
max_pers_vals = rbind(max_pers_vals, vec)
}
# Run for repeated samples
data_pers_vals = c()
data_pers_vals = data.frame(TM = numeric(), NM = numeric(), NT = numeric(), TH = numeric(), BE = character(), stringsAsFactors = FALSE)
bdw = seq(0.05, .25, by=0.025) # range of bandwidths
for (h in bdw){
true_vec = vec_max_pers(h, 'annulus_tm'); noisy_vec = vec_max_pers(h, 'annulus_nm')
kde_thresh_vec = vec_max_pers(h, 'annulus_kde_th'); kde_nothresh_vec = vec_max_pers(h, 'annulus_kde_nt')
vec = data.frame(TM = true_vec, NM = noisy_vec, NT = kde_nothresh_vec, TH = kde_thresh_vec, BW = as.character(h))
data_pers_vals = rbind(data_pers_vals, vec)
}
rm(list = ls())
library(TDA)
library(dplyr)
library(ripserr)
library(ggplot2)
source('utils.R')
library(tidyverse)
theme_set(theme_bw())
img.dir = '../images/'
# (1) Load the data
true_manifold = read.csv('../data/tprecovery/annulus_tm.csv') %>% select(X0, X1)
noisy_manifold = read.csv('../data/tprecovery/annulus_nm.csv') %>% select(X0, X1)
kde_samples_thresh = read.csv('../data/tprecovery/annulus_kde_th.csv') %>% select(X0, X1)
kde_samples_nothresh = read.csv('../data/tprecovery/annulus_kde_nt.csv') %>% select(X0, X1)
# (2) Add the circular geometry for plotting
circle_unif <- function(n, r=1){
theta <- runif(n, 0, 2*pi); x <- cos(theta)*r; y <- sin(theta)*r
circle_data <- data.frame(x1=x, x2=y) %>% arrange(atan2(x2, x1))
return(circle_data)
}
sparse_geometry = circle_unif(1000) %>% rename(sparse_x0=x1, sparse_x1=x2)
dense_geometry = circle_unif(1000, 0.5) %>% rename(dense_x0=x1, dense_x1=x2)
cbind(noisy_manifold, sparse_geometry, dense_geometry) %>%
ggplot(aes(x = X0, y=X1)) +
geom_point(alpha=0.75, size=0.5) + xlab('x') + ylab('y') +
geom_point(data = true_manifold, aes(x=X0, y=X1), color="#619CFF", alpha=0.75, size=0.5) +
geom_path(aes(x=sparse_x0, y=sparse_x1), color='pink') +
geom_path(aes(x=dense_x0, y=dense_x1), color='red', alpha=0.5) +
theme(axis.title.y = element_text(angle = 0, vjust=0.5))
# (3) Compute the persistence diagrams on the noisy data using VR, DTM and KDE as benchmark
vr_diagram = vietoris_rips(noisy_manifold, dim=1) # VR diagram
dtm_ = gridDiag(X = as.matrix(noisy_manifold), FUN = dtm, m0=0.9, lim=cbind(
c(min(noisy_manifold$X0), max(noisy_manifold$X0)),
c(min(noisy_manifold$X1), max(noisy_manifold$X1))),
by = 0.05, sublevel = F, location = TRUE, library = 'Dionysus'
)[['diagram']]
dtm_diagram = data.frame(dimension=dtm_[, 1], birth=dtm_[, 3], death=dtm_[, 2]) # DTM diagram
kde_ = gridDiag(X = as.matrix(noisy_manifold), FUN = kde, h=0.1, lim=cbind(
c(min(noisy_manifold$X0), max(noisy_manifold$X0)),
c(min(noisy_manifold$X1), max(noisy_manifold$X1))),
by = 0.05, sublevel = F, location = TRUE, library = 'Dionysus'
)[['diagram']]
kde_diagram = data.frame(dimension=kde_[, 1], birth=kde_[, 3], death=kde_[, 2]) # KDE diagram
plot_diagram(vr_diagram, x_lim=c(0, .6), y_lim=c(0, .6))
#ggsave(paste(img.dir, 'vr_pd_overlap_annulus_noisy.pdf', sep=''), dpi=300, height = 3, width = 3)
plot_diagram(dtm_diagram, TRUE, x_lim=c(0, 2), y_lim=c(0, 2))
#ggsave(paste(img.dir, 'dtm_pd_overlap_annulus_noisy.pdf', sep=''), dpi=300, height = 3, width = 3)
plot_diagram(kde_diagram, TRUE)
# (4) Plot the smoothed surface of the noisy manifold
ggplot(data=kde_samples_thresh,  aes(x=X0, y=X1)) + xlab('x') + ylab('y') +
xlim(c(-1, 1)) + ylim(c(-1, 1)) +
stat_density2d(geom="tile", aes(fill=..density..^0.25), contour=FALSE) +
scale_fill_gradientn(colours = colorRampPalette(c("white", blues9))(256),
guide = guide_colorbar(title = 'Density',
barheight = unit(3, "mm"),
barwidth = unit(30, "mm"),
direction = "horizontal",
title.position = "top")) +
theme(text = element_text(size=14), legend.box.background = element_rect(color = "black"),
legend.title=element_blank(), axis.title.y = element_text(angle = 0, vjust=0.5),
legend.position = c(0.74, 0.05), legend.margin = margin(0, 0, 0, 0),
legend.text = element_text(size = 7), legend.spacing.x = unit(0, "mm"),
legend.spacing.y = unit(0, "mm"))
# (5) Plot the diagrams of the smoothed samples
vr_diagram_smooth = vietoris_rips(kde_samples_thresh, dim=1) # VR diagram
dtm_ = gridDiag(X = as.matrix(kde_samples_thresh), FUN = dtm, m0=0.9, lim=cbind(
c(min(kde_samples_thresh$X0), max(kde_samples_thresh$X0)),
c(min(kde_samples_thresh$X1), max(kde_samples_thresh$X1))),
by = 0.05, sublevel = F, location = TRUE, library = 'Dionysus'
)[['diagram']]
dtm_diagram_smooth = data.frame(dimension=dtm_[, 1], birth=dtm_[, 3], death=dtm_[, 2]) # DTM diagram
kde_ = gridDiag(X = as.matrix(kde_samples_thresh), FUN = kde, h=0.1, lim=cbind(
c(min(kde_samples_thresh$X0), max(kde_samples_thresh$X0)),
c(min(kde_samples_thresh$X1), max(kde_samples_thresh$X1))),
by = 0.05, sublevel = F, location = TRUE, library = 'Dionysus'
)[['diagram']]
kde_diagram_smooth = data.frame(dimension=kde_[, 1], birth=kde_[, 3], death=kde_[, 2]) # KDE diagram
plot_diagram(vr_diagram_smooth, x_lim=c(0, .6), y_lim=c(0, .6))
#ggsave(paste(img.dir, 'vr_pd_overlap_annulus_smoothed.pdf', sep=''), dpi=300, height = 3, width = 3)
plot_diagram(dtm_diagram_smooth, TRUE, x_lim=c(0, 2), y_lim=c(0, 2))
#ggsave(paste(img.dir, 'dtm_pd_overlap_annulus_smoothed.pdf', sep=''), dpi=300, height = 3, width = 3)
plot_diagram(kde_diagram_smooth, TRUE, x_lim=c(0, 1.5), y_lim=c(0, 1.5))
# (6) Using only the KDE, we vary the bandwidth
max_pers <- function(grid_diagram){
dgmat = as.matrix(grid_diagram[['diagram']])
dg = data.frame(dimension = dgmat[, 1], birth=dgmat[, 3], death=dgmat[, 2]) %>% filter(dimension==1)
return(round(max(dg$birth - dg$death), 2))
}
vec_max_pers <- function(bw, file_idx){
mx_pers = c()
for (k in 0:99){
file_path = paste('../data/tprecovery/', file_idx, k, '.csv', sep='')
data = read.csv(file_path) %>% select(X0, X1)
grid_diag = gridDiag(X = as.matrix(data), FUN = kde, h=bw,
lim=cbind( c(min(data$X0), max(data$X0)), c(min(data$X1), max(data$X1))),
by = 0.05, sublevel = F, location = TRUE, library = 'Dionysus')
mx_pers = c(mx_pers, max_pers(grid_diag))
}
return(mx_pers)
}
# Run for repeated samples
data_pers_vals = c()
data_pers_vals = data.frame(TM = numeric(), NM = numeric(), NT = numeric(), TH = numeric(), BE = character(), stringsAsFactors = FALSE)
bdw = seq(0.05, .25, by=0.025) # range of bandwidths
for (h in bdw){
true_vec = vec_max_pers(h, 'annulus_tm'); noisy_vec = vec_max_pers(h, 'annulus_nm')
kde_thresh_vec = vec_max_pers(h, 'annulus_kde_th'); kde_nothresh_vec = vec_max_pers(h, 'annulus_kde_nt')
vec = data.frame(TM = true_vec, NM = noisy_vec, NT = kde_nothresh_vec, TH = kde_thresh_vec, BW = as.character(h))
data_pers_vals = rbind(data_pers_vals, vec)
}
data_long <- data_pers_vals %>% pivot_longer(cols = c(NM, TH, NT), names_to = "Manifold", values_to = "Value") %>% mutate(Value = Value - TM)
manifold_labels <- c( NM = expression(KDE(bold(X)[n])), TH = expression(KDE(bold(X)[n]^{'*'})), NT = expression(KDE(bar(bold(X))[n]^{'*'})))
View(data_long)
max(data_long$TM)
min(data_long$TM)
View(data_pers_vals)
max(data_pers_vals$TH)
min(data_pers_vals$TH)
rm(list = ls())
library(TDA)
library(dplyr)
library(foreach)
source('utils.R')
library(doParallel)
theme_set(theme_bw())
library(scatterplot3d)
img.dir = '../images/'
# Read in the data
true_manifold = read.csv('../data/varyingdatadistribution/threshold_relaxation_true_manifold.csv') %>% select(V1, V2, V3)
noisy_manifold = read.csv('../data/varyingdatadistribution/threshold_relaxation_noisy_manifold.csv') %>% select(V1, V2, V3)
kde_samples_thresh = read.csv('../data/varyingdatadistribution/threshold_relaxation_kde_samples_thresh.csv') %>% select(X0, X1, X2)
kde_samples_nothresh = read.csv('../data/varyingdatadistribution/threshold_relaxation_kde_samples_nothresh.csv') %>% select(X0, X1, X2)
noisy_manifold_plt  = prcomp(noisy_manifold)$x
par(mar = c(0, 0, 0, 0), oma = c(0, 0, 0, 0))
scatterplot3d(noisy_manifold_plt[,1:3], pch = 16,grid=TRUE, box=F, cex.symbols = .75, lab.z = 5,
angle = -153, xlab = '', ylab = 'y', zlab = 'z', cex.lab = 1, cex.axis = .7)
noisy_manifold_plt  = prcomp(true_manifold)$x
par(mar = c(0, 0, 0, 0), oma = c(0, 0, 0, 0))
scatterplot3d(noisy_manifold_plt[,1:3], pch = 16,grid=TRUE, box=F, cex.symbols = .75, lab.z = 5,
angle = -153, xlab = '', ylab = 'y', zlab = 'z', cex.lab = 1, cex.axis = .7)
scatterplot3d(true_manifold[,1:3], pch = 16,grid=TRUE, box=F, cex.symbols = .75, lab.z = 5,
angle = -153, xlab = '', ylab = 'y', zlab = 'z', cex.lab = 1, cex.axis = .7)
scatterplot3d(noisy_manifold[,1:3], pch = 16,grid=TRUE, box=F, cex.symbols = .75, lab.z = 5,
angle = -153, xlab = '', ylab = 'y', zlab = 'z', cex.lab = 1, cex.axis = .7)
rm(list = ls())
library(TDA)
library(dplyr)
library(foreach)
source('utils.R')
library(doParallel)
theme_set(theme_bw())
library(scatterplot3d)
img.dir = '../images/'
# Read in the data
true_manifold = read.csv('../data/varyingdatadistribution/threshold_relaxation_true_manifold.csv') %>% select(V1, V2, V3)
noisy_manifold = read.csv('../data/varyingdatadistribution/threshold_relaxation_noisy_manifold.csv') %>% select(V1, V2, V3)
kde_samples_thresh = read.csv('../data/varyingdatadistribution/threshold_relaxation_kde_samples_thresh.csv') %>% select(X0, X1, X2)
kde_samples_nothresh = read.csv('../data/varyingdatadistribution/threshold_relaxation_kde_samples_nothresh.csv') %>% select(X0, X1, X2)
noisy_manifold_plt  = prcomp(noisy_manifold)$x
par(mar = c(0, 0, 0, 0), oma = c(0, 0, 0, 0))
scatterplot3d(noisy_manifold_plt[,1:3], pch = 16,grid=TRUE, box=F, cex.symbols = .75, lab.z = 5,
angle = -153, xlab = '', ylab = 'y', zlab = 'z', cex.lab = 1, cex.axis = .7)
cc_df = read.csv('../data/varyingdatadistribution/cc_btl_dist_kde_noisy_1000.csv')
btl_dist_kde = cc_df$btl_dist_kde
btl_dist_noisy = cc_df$btl_dist_noisy
quantile(btl_dist_noisy, 0.95)
rm(list = ls())
library(TDA)
library(ripserr)
library(tidyverse)
library(scatterplot3d)
library(nonlinearTseries)
theme_set(theme_bw())
source('utils.R')
img.dir = '../images/'
data.dir = '../data/application/'
?timeLag
rm(list = ls())
library(TDA)
library(ripserr)
library(tidyverse)
library(scatterplot3d)
library(nonlinearTseries)
theme_set(theme_bw())
source('utils.R')
img.dir = '../images/'
data.dir = '../data/application/'
# Read in the exoplanet data
exo_data = read.csv(paste(data.dir, "exoplanet_time_series.csv", sep = ''))
# Add random noise to the planet+spot rv signal
set.seed(100)
n_obs     = nrow(exo_data %>% filter(type=="Planet+Spot"))
rnd_noise = rnorm(n=n_obs, sd=.3)
epsilon   = runif(n_obs, min = -2, max = 2)
ps_clean  = exo_data[exo_data$type=='Planet+Spot', 'rv']
ps_noisy  = approx(1:n_obs, ps_clean, xout = (1:n_obs) + epsilon, method = "linear", rule = 2)$y
exo_data[exo_data$type=='Planet+Spot', 'rv'] = ps_noisy + rnd_noise
# Individually extract the various components
spot        = exo_data %>% filter(type=="Spot")
planet      = exo_data %>% filter(type=="Planet")
planet_spot = exo_data %>% filter(type=="Planet+Spot")
# Re-level for plotting
exo_data$type = factor(exo_data$type, levels = c("Planet", "Spot", "Planet+Spot"))
exo_data %>% ggplot(aes(x = time, y=rv)) + xlab('Time (Days)') + ylab('Radial Velocity (m/sec)') +
geom_point(aes(color=type, shape = type)) +
theme(legend.position = "top", legend.margin = margin(b = -11),
legend.background = element_rect(fill = "transparent", color = NA)) +
scale_shape_manual(values = c(19, 17, 0)) +
labs(color = NULL, shape=NULL) + geom_line(aes(color = type)) #
# Estimate the delay step using average mutual information
tau.ami_spot       = timeLag(spot$rv, selection.method = 'first.minimum', technique = "ami", lag.max = 100, do.plot = T)
tau.ami_spot
tau.ami_planet     = timeLag(planet$rv, selection.method = 'first.minimum', technique = "ami", lag.max = 100, do.plot = T)
tau.ami_planet
tau.ami_planetspot = timeLag(planet_spot$rv, selection.method = 'first.minimum', technique = "ami", lag.max = 100, do.plot = T)
tau.ami_planetspot
tau.ami_planet     = timeLag(planet$rv, selection.method = 'first.minimum', technique = "ami", lag.max = 100, do.plot = T)
sqrt(3)
x = circleUnif(1000, r = 1)
a = vietoris_rips(x, dim=1)
plot(x)
tail(a)
?vietoris_rips
